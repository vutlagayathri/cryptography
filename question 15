#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define MAX_PLAINTEXTS 10
#define MAX_CIPHERTEXT_LENGTH 1000

void decrypt(char *ciphertext, int shift, char *plaintext) {
    int len = strlen(ciphertext);
    for (int i = 0; i < len; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            plaintext[i] = (ciphertext[i] - base - shift + ALPHABET_SIZE) % ALPHABET_SIZE + base;
        } else {
            plaintext[i] = ciphertext[i]; 
        }
    }
    plaintext[len] = '\0';
}

void countFrequency(char *text, int *frequency) {
    int len = strlen(text);
    for (int i = 0; i < len; i++) {
        if (isalpha(text[i])) {
            int index = toupper(text[i]) - 'A';
            frequency[index]++;
        }
    }
}
void frequencyAttack(char *ciphertext, int topN) {
    int frequency[ALPHABET_SIZE] = {0};
    countFrequency(ciphertext, frequency);
    int maxFrequency = -1;
    int maxIndex = -1;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        if (frequency[i] > maxFrequency) {
            maxFrequency = frequency[i];
            maxIndex = i;
        }
    }
    int shift = (maxIndex + ALPHABET_SIZE - ('E' - 'A')) % ALPHABET_SIZE;
    char plaintext[MAX_CIPHERTEXT_LENGTH];
    decrypt(ciphertext, shift, plaintext);
    printf("Top %d possible plaintexts (in order of likelihood):\n", topN);
    for (int i = 0; i < topN; i++) {
        decrypt(ciphertext, (shift + i) % ALPHABET_SIZE, plaintext);
        printf("%d. %s\n", i + 1, plaintext);
    }
}

int main() {
    char ciphertext[MAX_CIPHERTEXT_LENGTH];
    int topN;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);

    printf("Enter the number of top possible plaintexts to display: ");
    scanf("%d", &topN);

    frequencyAttack(ciphertext, topN);

    return 0;
}
